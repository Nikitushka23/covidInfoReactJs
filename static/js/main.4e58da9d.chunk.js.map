{"version":3,"sources":["functions/getByCountry.js","reducer.js","components/Chart.js","components/Render.js","App.js","index.js"],"names":["getByCountry","country","dispatch","a","fetch","response","json","cases","recovered","deaths","active","type","payload","console","log","message","initialState","worldData","countryData","isCountrySelected","reducer","state","Error","useCovidAPI","dispatcher","useCallback","action","useThunk","useReducer","useEffect","Chart","props","useState","chartData","labels","datasets","data","params","backgroundColor","className","selectedCountry","width","height","options","maintainAspectRatio","StatsRender","App","countryInput","setCountryInput","showChart","setShowChart","setSelectedCountry","findCorona","e","preventDefault","trim","findWorldCorona","onClick","placeholder","onChange","target","value","toUpperCase","onKeyPress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e58da9d.chunk.js","sourcesContent":["const getByCountry = (country) => async (dispatch) => {\r\n  try {\r\n    const response = await fetch(\r\n      `https://coronavirus-19-api.herokuapp.com/countries/${country}`\r\n    );\r\n    const { cases, recovered, deaths, active } = await response.json();\r\n    dispatch({\r\n      type: \"find\",\r\n      payload: { active, cases, recovered, deaths },\r\n    });\r\n  } catch (err) {\r\n    console.log(err.message);\r\n    return {};\r\n  }\r\n};\r\n\r\nexport default getByCountry;\r\n","import { useCallback, useReducer, useEffect } from \"react\";\r\n\r\nimport getAll from \"./functions/getAll\";\r\nimport getByCountry from \"./functions/getByCountry\";\r\n\r\nimport Chart from \"./components/Chart\";\r\n\r\nconst initialState = {\r\n  worldData: {},\r\n  countryData: {},\r\n  isCountrySelected: false,\r\n};\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n  console.log(\"hui\");\r\n  switch (type) {\r\n    case \"find\":\r\n      return { ...state, countryData: payload };\r\n    // case \"worldInfo\":\r\n    //   return { ...state, worldData: payload, isCountrySelected: false };\r\n    default:\r\n      throw new Error(`not implemented action for ${type}`);\r\n  }\r\n};\r\n\r\nconst useThunk = ([state, dispatch]) => {\r\n  const dispatcher = useCallback(\r\n    (action) => {\r\n      return typeof action === \"function\"\r\n        ? action(dispatcher, state)\r\n        : dispatch(action);\r\n    },\r\n    [dispatch, state]\r\n  );\r\n  return [state, dispatcher];\r\n};\r\n\r\nconst useCovidAPI = () => {\r\n  const [state, dispatch] = useThunk(useReducer(reducer, initialState));\r\n  useEffect(() => {\r\n    const { countryData } = state;\r\n      dispatch(getByCountry(\"World\"));   \r\n  }, []);\r\n  return [state, dispatch];\r\n};\r\n\r\nexport { reducer, useThunk };\r\nexport default useCovidAPI;\r\n","import React, { useReducer, useState } from \"react\";\r\nimport { Pie } from \"react-chartjs-2\";\r\nimport useCovidAPI from \"../reducer\";\r\nimport './Chart.css'\r\n\r\nconst Chart = (props) => {\r\n  const [selectedInfo, setSelectedInfo] = useState(\"getAll\");\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n  const chartData = {\r\n    labels: [\"Active\", \"Cases\", \"Deaths\", \"Recovered\"],\r\n    datasets: [\r\n      {\r\n        data: [\r\n          props.params.active,\r\n          props.params.cases,\r\n          props.params.deaths,\r\n          props.params.recovered,\r\n        ],\r\n        backgroundColor: [\r\n          \"rgb(241, 10, 10)\",\r\n          \"rgba(255, 99, 132, 0.6)\",\r\n          \"rgb(100, 98, 98)\",\r\n          \"rgb(31, 207, 31)\",\r\n        ],\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <div className=\"chart\">\r\n      {<h2>{props.params.selectedCountry + \" info\"}</h2>}\r\n      <div className=\"chart-pie\">\r\n      <Pie\r\n        data={chartData}\r\n        width={300}\r\n        height={300}\r\n        options={{ maintainAspectRatio: false }}\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React from \"react\";\r\n\r\nconst StatsRender = (props) => {\r\n  return (\r\n    <div>\r\n      <h2 className=\"\">{props.params.selectedCountry} info</h2>\r\n      <div className=\"stats\">\r\n        <h3 className=\"stats-header\">Active at this moment</h3>\r\n        <h3 className=\"stats-fill\">{props.params.active}</h3>\r\n      </div>\r\n      <div className=\"stats\">\r\n        <h3 className=\"stats-header\">Cases at this moment</h3>\r\n        <h3 className=\"stats-fill\">{props.params.cases}</h3>\r\n      </div>\r\n      <div className=\"stats\">\r\n        <h3 className=\"stats-header\">Deaths at this moment</h3>\r\n        <h3 className=\"stats-fill\">{props.params.deaths}</h3>\r\n      </div>\r\n      <div className=\"stats\">\r\n        <h3 className=\"stats-header\">Recovered at this moment</h3>\r\n        <h3 className=\"stats-fill\">{props.params.recovered}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatsRender;","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Chart from \"./components/Chart\";\r\nimport useCovidAPI from \"./reducer\";\r\nimport getByCountry from \"./functions/getByCountry\";\r\nimport StatsRender from \"./components/Render\";\r\n\r\nconst App = (props) => {\r\n  const [state, dispatch] = useCovidAPI();\r\n  const [countryInput, setCountryInput] = useState(\"\");\r\n  const [showChart, setShowChart] = useState(true);\r\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n\r\n  let {\r\n    countryData: { country, cases, recovered, deaths, active },\r\n  } = state;\r\n\r\n  const params = {\r\n    cases: state.countryData.cases,\r\n    recovered: state.countryData.recovered,\r\n    deaths: state.countryData.deaths,\r\n    active: state.countryData.active,\r\n    selectedCountry: selectedCountry,\r\n  };\r\n\r\n  const resetInput = () => {\r\n    setCountryInput(\"\");\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setCountryInput(e.target.value.toUpperCase());\r\n  };\r\n\r\n  const findCorona = async (e) => {\r\n    e.preventDefault();\r\n    dispatch(getByCountry(countryInput.trim()));\r\n    setSelectedCountry(countryInput);\r\n    resetInput();\r\n  };\r\n  const findWorldCorona = async (e) => {\r\n    dispatch(getByCountry(\"World\"));\r\n    setSelectedCountry(\"World\");\r\n  };\r\n  useEffect(() => {\r\n    dispatch(getByCountry(\"World\"));\r\n    setSelectedCountry(\"World\");\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"interaction\">\r\n      <h1 className=\"header\">COVID-19 INFO</h1>\r\n      <button onClick={findWorldCorona} className=\"world-button\">\r\n        World info\r\n      </button>\r\n      <div className=\"some-text\">Or find yours</div>\r\n      <div className=\"input-field\">\r\n        <input\r\n          className=\"input-first\"\r\n          type=\"text\"\r\n          placeholder=\"choose your country\"\r\n          onChange={handleInput}\r\n          value={countryInput}\r\n        ></input>\r\n        <input\r\n          className=\"input-second\"\r\n          type=\"submit\"\r\n          onKeyPress={findCorona} \r\n          onClick={findCorona}\r\n          value=\"FIND IT\"\r\n        ></input>\r\n      </div>\r\n      <button className=\"world-button\" onClick={() => setShowChart(!showChart)}>\r\n        {!showChart ? \"Show stats\" : \"Show chart\"}\r\n      </button>\r\n      </div>\r\n      {!showChart ? <Chart params={params} /> : <StatsRender params={params} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}